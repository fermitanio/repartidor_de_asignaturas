package com.mycompany.asignaturas;

import static com.mycompany.asignaturas.Repartidor.repartir_asignaturas;
import static com.mycompany.asignaturas.Repartidor.v_asignaturas;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.prefs.Preferences;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListCellRenderer;
import javax.swing.filechooser.FileFilter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author fermitanio
 */
public class Cargar_datos_GUI extends javax.swing.JFrame {

    private Asignatura[] v_asignaturas;
    private Profesor[] v_profesores;
    ArrayList<ArrayList<Asignatura[]>> l_repartos_asignaturas;
    static ArrayList<ArrayList<Asignaturas_de_un_profesor>> repartos_entre_profesores_global;
    static private Repartidor repartidor;
    private static String LAST_USED_FOLDER = "";

    /**
     * Creates new form Repartidor
     */
    public Cargar_datos_GUI() {
        initComponents();
        this.setResizable(false);

        javax.swing.JComboBox<String> jCombo = get_jComboBox_asignaturas_encontradas();
        jCombo.setPreferredSize(new Dimension(jCombo.getSize().width, jCombo.getSize().height));
        jCombo.setMaximumSize(new Dimension(jCombo.getSize().width, jCombo.getSize().height));
        jCombo.setRenderer(new LargeComboBoxRenderer(jCombo.getSize().width));
        jCombo.addItem("_");

        jCombo = get_jComboBox_profesores_encontrados();
        jCombo.setPreferredSize(new Dimension(jCombo.getSize().width, jCombo.getSize().height));
        jCombo.setMaximumSize(new Dimension(jCombo.getSize().width, jCombo.getSize().height));
        jCombo.setRenderer(new LargeComboBoxRenderer(jCombo.getSize().width));
        jCombo.addItem("_");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton_asignaturas = new javax.swing.JButton();
        jLabel_añadir_asignaturas = new javax.swing.JLabel();
        jButton_profesores = new javax.swing.JButton();
        jLabel_añadir_profesores = new javax.swing.JLabel();
        jButton_repartir = new javax.swing.JButton();
        jComboBox_profesores_encontrados = new javax.swing.JComboBox<>();
        jComboBox_asignaturas_encontradas = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton_asignaturas.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton_asignaturas.setText("Abrir...");
        jButton_asignaturas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton_asignaturasMouseClicked(evt);
            }
        });

        jLabel_añadir_asignaturas.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel_añadir_asignaturas.setText("Añadir asignaturas");

        jButton_profesores.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton_profesores.setText("Abrir...");
        jButton_profesores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton_profesoresMouseClicked(evt);
            }
        });

        jLabel_añadir_profesores.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel_añadir_profesores.setText("Añadir profesores");

        jButton_repartir.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton_repartir.setText("Repartir");
        jButton_repartir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton_repartirMouseClicked(evt);
            }
        });

        jComboBox_profesores_encontrados.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jComboBox_profesores_encontrados.setEnabled(false);

        jComboBox_asignaturas_encontradas.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jComboBox_asignaturas_encontradas.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton_repartir))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel_añadir_profesores)
                            .addComponent(jLabel_añadir_asignaturas))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 83, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton_asignaturas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton_profesores))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBox_profesores_encontrados, 0, 206, Short.MAX_VALUE)
                    .addComponent(jComboBox_asignaturas_encontradas, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(29, 29, 29))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_asignaturas)
                    .addComponent(jLabel_añadir_asignaturas)
                    .addComponent(jComboBox_asignaturas_encontradas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_profesores)
                    .addComponent(jLabel_añadir_profesores)
                    .addComponent(jComboBox_profesores_encontrados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addComponent(jButton_repartir)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void GUI_cargar_listado_profesores(Profesor v_profesores[], javax.swing.JComboBox<String> jCombo) {

        if (v_profesores == null || v_profesores.length == 0 || jCombo == null) {
            return;
        }

        for (int i = 0, j = v_profesores.length; i < j; i++) {
            jCombo.addItem((i + 1) + ". " + v_profesores[i].nombre_completo);
        }
    }

    public void GUI_cargar_listado_asignaturas(Asignatura v_asignaturas[], javax.swing.JComboBox<String> jCombo) {

        if (v_asignaturas == null || v_asignaturas.length == 0 || jCombo == null) {
            return;
        }

        for (int i = 0, j = v_asignaturas.length; i < j; i++) {
            jCombo.addItem((i + 1) + ". " + v_asignaturas[i].nombre + " - " + v_asignaturas[i].horas + " horas");
        }
    }

    private void jButton_asignaturasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_asignaturasMouseClicked

        //Create a file chooser
        //Create a file chooser
        Preferences prefs = Preferences.userRoot().node(getClass().getName());
        JFileChooser fc = new JFileChooser(LAST_USED_FOLDER);

        //
        fc.setFileFilter(new FileFilter() {

            public String getDescription() {
                return "Archivos CSV (*.csv)";
            }

            public boolean accept(File f) {
                if (f.isDirectory()) {
                    return true;
                } else {
                    String filename = f.getName().toLowerCase();
                    return filename.endsWith(".csv");
                }
            }
        });

        //In response to a button click:
        javax.swing.JComboBox<String> jCombo;
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();

            LAST_USED_FOLDER = file.getAbsolutePath();
            int n = LAST_USED_FOLDER.lastIndexOf("\\");
            LAST_USED_FOLDER = LAST_USED_FOLDER.substring(0, n);

            //This is where a real application would open the file.
            v_asignaturas = repartidor.cargar_asignaturas(file.getPath());
            // log.append("Opening: " + file.getName() + "." + newline);
        } else {
            // log.append("Open command cancelled by user." + newline);
        }

        if (v_asignaturas == null) {
            JOptionPane.showMessageDialog(this, "El archivo no contiene asignaturas.", "Archivo no válido", JOptionPane.WARNING_MESSAGE);
            jCombo = get_jComboBox_asignaturas_encontradas();
            jCombo.setEnabled(false);
            return;
        }

        // Repartidor.quicksort_asignaturas(v_asignaturas, 0, v_asignaturas.length - 1);
        jCombo = get_jComboBox_asignaturas_encontradas();
        jCombo.removeAllItems();
        jCombo.addItem(v_asignaturas.length + " asignaturas encontradas");
        GUI_cargar_listado_asignaturas(v_asignaturas, jCombo);
        jCombo.setEnabled(true);
    }//GEN-LAST:event_jButton_asignaturasMouseClicked

    private boolean validar_formulario() {

        if (v_asignaturas == null || v_asignaturas.length == 0) {
            JOptionPane.showMessageDialog(this, "No hay asignaturas que repartir.", "Asignaturas", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }

        if (v_profesores == null || v_profesores.length == 0) {
            JOptionPane.showMessageDialog(this, "No hay profesores para repartir.", "Asignaturas", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }

        /*
        int n_cantidad_de_profesores[] = Repartidor.cantidad_de_profesores_para_el_reparto(l_repartos_asignaturas);

        if (v_profesores.length > n_cantidad_de_profesores[1]) {
            JOptionPane.showMessageDialog(this, "Demasiados profesores. El máximo es " + n_cantidad_de_profesores[1] + " profesores.", "Profesores", JOptionPane.INFORMATION_MESSAGE);
        }
        if (v_profesores.length < n_cantidad_de_profesores[0]) {
            JOptionPane.showMessageDialog(this, "Pocos profesores. El mínimo es " + n_cantidad_de_profesores[0] + " profesores.", "Profesores", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
         */
        int min_horas_por_profesor = 0;
        int max_horas_por_profesor = 0;
        for (int i = 0, j = v_profesores.length; i < j; i++) {
            min_horas_por_profesor = v_profesores[i].horas_mínimas_de_clase;
            max_horas_por_profesor = v_profesores[i].horas_máximas_de_clase;

            if (min_horas_por_profesor < Repartidor.MIN_HORAS_POR_PROFESOR) {
                JOptionPane.showMessageDialog(this, "Horas mínimas debe valer " + Repartidor.MIN_HORAS_POR_PROFESOR + " o más.", "Horas mínimas", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
            if (max_horas_por_profesor < Repartidor.MIN_HORAS_POR_PROFESOR + 1) {
                JOptionPane.showMessageDialog(this, "Horas máximas debe valer " + (Repartidor.MIN_HORAS_POR_PROFESOR + 1) + " o más.", "Horas máximas", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
            if (max_horas_por_profesor < min_horas_por_profesor) {
                JOptionPane.showMessageDialog(this, "Horas mínimas debe valer más que horas máximas.", "Horas", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
            if (min_horas_por_profesor > Repartidor.MAX_HORAS_POR_PROFESOR - 1) {
                JOptionPane.showMessageDialog(this, "Horas mínimas debe valer menos de " + (Repartidor.MAX_HORAS_POR_PROFESOR - 1) + ".", "Horas mínimas", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
            if (max_horas_por_profesor > Repartidor.MAX_HORAS_POR_PROFESOR) {
                JOptionPane.showMessageDialog(this, "Horas máximas debe valer menos de " + Repartidor.MAX_HORAS_POR_PROFESOR + ".", "Horas máximas", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
        }
        /*
        try {
            javax.swing.JTextField textField = get_jTextField_horas_min();
            min_horas_por_profesor = Integer.parseInt(textField.getText());
            textField = get_jTextField_horas_max();
            max_horas_por_profesor = Integer.parseInt(textField.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Valor para horas no válido. Debe ser numérico.", "Horas", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }*/

        max_horas_por_profesor = 0;
        for (int i = 0, j = v_profesores.length; i < j; i++) {
            if (v_profesores[i].horas_máximas_de_clase > max_horas_por_profesor) {
                max_horas_por_profesor = v_profesores[i].horas_mínimas_de_clase;
            }
        }

        for (int i = 0, j = v_asignaturas.length; i < j; i++) {
            int duracion = v_asignaturas[i].horas;
            if (duracion > max_horas_por_profesor) {
                JOptionPane.showMessageDialog(this, "Hay asignaturas cuya duración es mayor que horas máximas por profesor.", "Asignaturas", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
        }

        /*
        boolean hay_repartos = Repartidor.hay_repartos_validos(v_asignaturas, v_profesores);

        if (!hay_repartos) {
            JOptionPane.showMessageDialog(this, "No hay repartos con los datos proporcionados.", "Sin repartos", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
         */
        return true;
    }

    private void jButton_repartirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_repartirMouseClicked

        if (validar_formulario()) {
            Repartir_GUI repartidor_GUI = new Repartir_GUI(this, v_asignaturas, v_profesores);
        }
    }//GEN-LAST:event_jButton_repartirMouseClicked

    private void jButton_profesoresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_profesoresMouseClicked

        //Create a file chooser
        Preferences prefs = Preferences.userRoot().node(getClass().getName());
        JFileChooser fc = new JFileChooser(LAST_USED_FOLDER);
        //
        fc.setFileFilter(new FileFilter() {

            public String getDescription() {
                return "Archivos CSV (*.csv)";
            }

            public boolean accept(File f) {
                if (f.isDirectory()) {
                    return true;
                } else {
                    String filename = f.getName().toLowerCase();
                    return filename.endsWith(".csv");
                }
            }
        });

        //In response to a button click:
        javax.swing.JComboBox<String> jCombo;
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            LAST_USED_FOLDER = file.getAbsolutePath();
            int n = LAST_USED_FOLDER.lastIndexOf("\\");
            LAST_USED_FOLDER = LAST_USED_FOLDER.substring(0, n);
            //
            v_profesores = repartidor.cargar_profesores(file.getPath());
            // log.append("Opening: " + file.getName() + "." + newline);
        } else {
            // log.append("Open command cancelled by user." + newline);
        }

        if (v_profesores == null) {
            JOptionPane.showMessageDialog(this, "El archivo no contiene profesores.", "Archivo no válido", JOptionPane.WARNING_MESSAGE);
            jCombo = get_jComboBox_profesores_encontrados();
            jCombo.setEnabled(false);
            return;
        }
        // Arrays.sort(v_profesores);
        jCombo = get_jComboBox_profesores_encontrados();
        jCombo.removeAllItems();
        jCombo.addItem(v_profesores.length + " profesores encontrados");
        GUI_cargar_listado_profesores(v_profesores, jCombo);
        jCombo.setEnabled(true);
        // GUI_cargar_líneas_profesores(v_profesores);

//        if (v_asignaturas != null && v_asignaturas.length > 0) {
//            ArrayList<ArrayList<Asignaturas_de_un_profesor>> repartos_entre_profesores_global = Repartidor.repartir_asignaturas(v_asignaturas, v_profesores);
//            repartos_entre_profesores_global = Repartidor.repartir_asignaturas(v_asignaturas, v_profesores);
//        }
    }//GEN-LAST:event_jButton_profesoresMouseClicked

    /*
    public void GUI_cargar_líneas_profesores(Profesor[] v_profesores) {
        javax.swing.JLabel profesor = new javax.swing.JLabel();
        profesor.setText(v_profesores[i].nombre_completo);

    }*/
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cargar_datos_GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cargar_datos_GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cargar_datos_GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cargar_datos_GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                repartidor = new Repartidor();
                new Cargar_datos_GUI().setVisible(true);
            }
        });
    }

    public javax.swing.JComboBox<String> get_jComboBox_profesores_encontrados() {
        return this.jComboBox_profesores_encontrados;
    }

    public javax.swing.JComboBox<String> get_jComboBox_asignaturas_encontradas() {
        return this.jComboBox_asignaturas_encontradas;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_asignaturas;
    private javax.swing.JButton jButton_profesores;
    private javax.swing.JButton jButton_repartir;
    private javax.swing.JComboBox<String> jComboBox_asignaturas_encontradas;
    private javax.swing.JComboBox<String> jComboBox_profesores_encontrados;
    private javax.swing.JLabel jLabel_añadir_asignaturas;
    private javax.swing.JLabel jLabel_añadir_profesores;
    // End of variables declaration//GEN-END:variables
}
